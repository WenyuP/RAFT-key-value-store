#!/usr/bin/env python3

import argparse, socket, time, json
import random
import select

BROADCAST = "FFFF"

LEADER = "leader"
CANDIDATE = 'candidate'
FOLLOWER = 'follower'

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.leader = BROADCAST

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.socket.setblocking(False)
        #current term the server is on
        self.term = 0
        self.state = FOLLOWER
        self.log = [{'term': 0}]

        # who the current server has voted for
        self.vote = None
        # the votes the current server received
        self.votes = []
        self.timeout = random.uniform(0.3, 0.4)
        # commit index of the server
        self.commited = 0
        self.last_committed = 0
        # key-value store
        self.data = {}
        self.flush_time = time.time()

        self.start = time.time()
        self.last_heartbeat = time.time()
        self.last_append = time.time()
        self.messages_timer = {}
        # temporary message storing queue if the owner is unknown
        self.no_leader_queue = []

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        self.last_heartbeat = time.time()
        self.last_append = time.time()
        self.flush_time = time.time()
        while True:
            try:
                cur = time.time()
                data, addr = self.socket.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
            except BlockingIOError:
                # if the current server hasn't received heartbeat from the leader, it will start election
                if cur - self.last_append >= self.timeout and self.state != LEADER:
                    self.elect()
                    self.last_append = time.time()
                # if self is leader, send heart beat every 0.15 sec
                if self.state == LEADER and cur - self.last_heartbeat >= 0.15:
                    self.send_append_entries(self.others)
                    self.last_heartbeat = time.time()
                continue

            msg = json.loads(msg)
            self.handle_msg(msg)

    # handle the messages received
    def handle_msg(self, msg):
        if msg['type'] == 'get':
            self.get(msg)
        elif msg['type'] == 'put':
            self.put(msg)
        elif msg['type'] == 'request_vote':
            self.request_vote(msg)
        elif msg['type'] == 'grant_vote':
            self.grant(msg)
        elif msg['type'] == 'reject_vote':
            self.reject(msg)
        elif msg['type'] == 'append_entries':
            self.append_entries(msg)
        elif msg['type'] == 'grant_append':
            self.grant_append(msg)
        elif msg['type'] == 'reject_append':
            self.reject_append(msg)

    def get(self, msg):
        if self.state == LEADER:
            key = msg['key']
            response = self.client_msg(msg['src'], 'ok', msg['MID'])

            # if the key is in its store, go and grab the value
            if key in self.data:
                response['value'] = self.data[key]
            else:
                response['value'] = ''
        # if self is not the leader, redirect to the leader
        elif self.leader != BROADCAST:
            response = self.client_msg(msg['src'], 'redirect', msg['MID'])

        # append the message to the queue if there is no leader now
        elif self.leader == BROADCAST:
            self.no_leader_queue.append(msg)

        self.send(response)

    # handle put request
    def put(self, msg):
        if self.state == LEADER and msg != '':
            if msg['MID'] in self.messages_timer and time.time() - self.messages_timer[msg['MID']] > 1:
                response = {
                    'src': self.id,
                    'dst': msg['src'],
                    'leader': BROADCAST,
                    'type': 'fail',
                    'MID': msg['MID']
                }

                # send fail to the leader
                self.send(response)
                del self.messages_timer[msg['MID']]

            elif msg['MID'] not in self.messages_timer:
                self.messages_timer[msg['MID']] = time.time()

            self.log.append(
                {'term': self.term,
                 'key': msg['key'],
                 'value': msg['value'],
                 'client': msg['src'],
                 'MID': msg['MID']})
            if self.flush_time - time.time() >= 0.01:
                self.send_append_entries(self.others)
                self.flush_time = time.time()

        # if self is the leader, append the request to the log
        elif self.state == LEADER:
            self.buffer = 0
            self.send_append_entries(self.others)

        # if there is no leader, append the message to the queue
        elif self.leader == BROADCAST:
            self.no_leader_queue.append(msg)

        else:
            response = self.client_msg(msg['src'], 'redirect', msg['MID'])
            self.send(response)

    # generate reply message
    def client_msg(self, src, type, mid):
        return {
            'src': self.id,
            'dst': src,
            'leader': self.leader,
            'type': type,
            'MID': mid
        }

    # start a election
    def elect(self):
        self.term += 1
        self.state = CANDIDATE
        self.vote = self.id
        self.votes = []
        self.votes.append(self.id)
        print("Replica %s has started a new election" % self.id)

        for id in self.others:
            msg = {
                'src': self.id,
                'dst': id,
                'leader': self.leader,
                'type': 'request_vote',
                'term': self.term,
                'candidate_id': self.id,
                'last_log_index': len(self.log) - 1,
                'last_log_term': self.log[-1]['term']
            }
            # send election request for all the other servers
            self.send(msg)

    # handle request vote message
    def request_vote(self, msg):
        if msg['term'] >= self.term and self.state != LEADER:
            self.state = FOLLOWER
            self.term = msg['term']
            self.leader = msg['leader']
            self.votes = []
            self.vote = None
            print("replica %s turn into follower" % self.id)

        if self.state == FOLLOWER:
            grant = self.construct_request(msg, 'grant_vote')
            reject = self.construct_request(msg, 'reject_vote')

            # check if the term is most up to date
            if msg['term'] < self.term:
                self.send(reject)
            elif not (self.vote is None or self.vote == msg['src']):
                self.send(reject)
            # check if the log is most up to date
            elif len(self.log) - 1 > msg['last_log_index']:
                self.send(reject)
            # if log is the same, check the last log term
            elif self.log[-1]['term'] > msg['last_log_term']:
                self.send(reject)
            else:
                self.send(grant)

    # construct a request
    def construct_request(self, msg, state):
        return {
            'src': self.id,
            'dst': msg['src'],
            'leader': self.leader,
            'type': state,
            'term': self.term
        }

    # grant the voting request
    def grant(self, msg):
        if self.state != CANDIDATE:
            return

        # if majority has agreed to vote, current server becomes the leader
        if msg['src'] not in self.votes:
            self.votes.append(self.votes)
            if len(self.votes) >= (len(self.others) + 1) // 2 + 1:
                print("New leader at replica %s" % self.id)
                self.state = LEADER
                self.leader = self.id
                self.votes = []
                self.next_indexes = {}
                self.match_indexes = {}
                for id in self.others:
                    self.next_indexes[id] = len(self.log)
                    self.match_indexes[id] = 0

    # generate a reject message
    def reject(self, msg):
        if self.state == CANDIDATE and msg['term'] >= self.term:
            self.term = msg['term']
            self.state = FOLLOWER
            self.votes = []
            self.vote = None
            # print("replica %s rejected to vote to %s" % self.id % msg['candidate_id'])

    # grant the append entries rpc
    def grant_append(self, msg):
        if self.state != LEADER:
            return
        self.next_indexes[msg['src']] = msg['next_index']
        self.match_indexes[msg['src']] = msg['next_index'] - 1

        # check if the log of the match index is correct
        i = len(self.log) - 1
        while i >= 0:
            if self.log[i]['term'] == self.term:
                count = 0
                for server in self.match_indexes:
                    if self.match_indexes[server] >= i:
                        count += 1
                if count >= ((len(self.others) + 1) // 2):
                    break
            i -= 1

        # update the commit index
        if i > self.commited:
            self.commited = i
            self.commit()

    # reject append entries rpc
    def reject_append(self, msg):
        if self.state != LEADER:
            return

        # check if term is the same
        if msg['term'] > self.term:
            self.state = FOLLOWER

        # check which has the longer log
        if 'next_index' in msg:
            self.next_indexes[msg['src']] = msg['next_index']
        else:
            self.next_indexes[msg['src']] = self.next_indexes[msg['src']] - 1
        self.send_append_entries([msg['src']])

    # received append entries rpc from the server, will update its state if is the first time hearing from the leader
    def append_entries(self, msg):
        if msg['term'] >= self.term:
            self.term = msg['term']
            self.state = FOLLOWER
            self.leader = msg['leader']
            self.vote = None
            self.votes = []
            for msg in self.no_leader_queue:
                self.send(self.client_msg(msg['src'], 'redirect', msg['MID']))
            self.no_leader_queue = []

        if self.state == FOLLOWER:

            # reject message
            reject = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': 'reject_append',
                'term': self.term
            }

            # grant message
            grant = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': 'grant_append',
                'term': self.term
            }

            # if term doesn't match, ask for an older log
            if msg['term'] < self.term:
                self.send(reject)
                return

            self.last_append = time.time()
            prev_log_index = msg['prev_log_index']
            prev_log_term = msg['prev_log_term']

            # if log index is not the one the server is looking for that can match with the leader
            # send a reject
            if len(self.log) - 1 < prev_log_index:
                self.send(reject)
                return

            # check the log for the term, if not equals, reject
            if prev_log_term != self.log[prev_log_index]['term']:
                for i in range(len(self.log)):
                    if self.log[i]['term'] == self.log[prev_log_index]['term']:
                        reject['next_index'] = i
                        break
                else:
                    reject['next_index'] = len(self.log) - 1
                self.send(reject)
                return

            # if everything matches, cut off the extra log and append the leader's log
            new_entries = msg['entries']
            self.log = self.log[: prev_log_index + 1]
            self.log.extend(new_entries)

            # update commit
            commit = msg['commit']

            if commit > self.commited:
                self.commited = min(commit, len(self.log) - 1)
            grant['next_index'] = len(self.log)

            # if there are no entries in the server, grand the append
            if msg['entries'] != 0:
                self.send(grant)
            self.commit()

    # check if a command can be executed, will be executed if majority agree
    def commit(self):
        while self.last_committed < self.commited:
            self.last_committed += 1
            key = self.log[self.last_committed]['key']
            value = self.log[self.last_committed]['value']
            self.data[key] = value
            if self.state == LEADER:
                msg = self.client_msg(self.log[self.last_committed]['client'], 'ok', self.log[self.last_committed]['MID'])
                self.send(msg)

    # react to the append entries from other server
    def send_append_entries(self, others):
        if self.state != LEADER:
            return
        for server in others:
            next_index = self.next_indexes[server]
            prev_log_index = next_index - 1
            prev_term = self.log[prev_log_index]['term']
            entries = self.log[next_index:]

            msg = {
                'src': self.id,
                'dst': server,
                'type': 'append_entries',
                'term': self.term,
                'leader': self.leader,
                'prev_log_index': prev_log_index,
                'prev_log_term': prev_term,
                'entries': entries,
                'commit': self.commited
            }

            self.send(msg)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
